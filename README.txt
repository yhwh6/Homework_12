Цели домашнего задания
Научится использовать параметризацию типов, разрабатывать прототип банковской системы с использованием WPF.



Задание 1
Что нужно сделать
Разработайте для банка «А» прототип банковской системы, которая содержит информацию о клиентах и их счетах. Счётом любого клиента можно управлять:

открывать и закрывать счета;
осуществлять переводы с одного счёта на другой;
Используя обобщение и параметризированные классы, реализуйте методы открытия, закрытия счетов, а также перевода средств между счетами клиентов.

Советы и рекомендации
На ваше усмотрение, где и как будут храниться данные при реализации программы с графическим интерфейсом. 

Что оценивается
Реализован графический интерфейс.
Используются параметризованные шаблоны.
Наличие конструктора в классе.
Как отправить задание на проверку
Сдайте работу в одном из этих форматов:

Проект в архиве ZIP или RAR со всеми файлами.
Ссылка на архив на Google Диске (или аналогах).
Ссылка на репозиторий GitHub с исходным кодом домашнего задания.


Задание 2
Что нужно сделать
Дополните программу из задания 1: расширьте данные по счёту. 

Счета могут быть двух типов:

недепозитный;
депозитный.
У клиента может быть два счёта, по одному каждого типа, с возможностью пополнять средства выбранного счета. Используя ковариантный интерфейс, реализуйте методы пополнения счёта по соответствующему типу.

Рекомендация
На ваше усмотрение, где и как будут храниться данные при реализации программы с графическим интерфейсом.

Что оценивается
Реализованы методы.
Использован ковариантный интерфейс.
Корректное описание данных в классе.
Наличие конструктора в классе.
Как отправить задание на проверку
Сдайте работу в одном из этих форматов:

Проект в архиве ZIP или RAR со всеми файлами.
Ссылка на архив на Google Диске (или аналогах).
Ссылка на репозиторий GitHub с исходным кодом домашнего задания.


Задание 3
Что нужно сделать
Продолжаем добавлять функционал для программы. Используя контравариантность реализуйте метод перевода между клиентами.

Рекомендация
На ваше усмотрение, где и как будут храниться данные при реализации программы с графическим интерфейсом. 

Рекомендуем изучить статью «Вариантность в программировании», чтобы лучше справиться с заданием и усвоить материал.

Что оценивается
Наличие контравариантного интерфейса.
Корректное описание данных в классе.
Наличие конструктора в классах.
Как отправить задание на проверку
Сдайте работу в одном из этих форматов:

Проект в архиве ZIP или RAR со всеми файлами.
Ссылка на архив на Google Диске (или аналогах).
Ссылка на репозиторий GitHub с исходным кодом домашнего задания.